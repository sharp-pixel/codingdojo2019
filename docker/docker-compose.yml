version: '3.4'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:$CONFLUENT_VERSION
    hostname: zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      KAFKA_JMX_PORT: 5555
      # ZOOKEEPER_SERVER_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.rmi.port=5555"
    networks:
      - zookeeper
      - monitoring

  broker:
    image: confluentinc/cp-enterprise-kafka:$CONFLUENT_VERSION
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1 # For Exactly once with ONE broker
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1 # For Exactly once with ONE broker
      KAFKA_JMX_PORT: 5555
      KAFKA_JMX_HOSTNAME: 'broker'
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:9092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
      # KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.rmi.port=5555"
    networks:
      - kafka
      - zookeeper
      - monitoring

  schema-registry:
    image: confluentinc/cp-schema-registry:$CONFLUENT_VERSION
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://broker:9092'
      SCHEMA_REGISTRY_JMX_PORT: 5555
      # SCHEMA_REGISTRY_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.rmi.port=5555"
    networks:
      - kafka
      - monitoring

  control-center:
    image: confluentinc/cp-enterprise-control-center:$CONFLUENT_VERSION
    hostname: control-center
    container_name: control-center
    depends_on:
      - zookeeper
      - broker
      - schema-registry
      - connect
      # - ksql-server
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:9092'
      CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      CONTROL_CENTER_CONNECT_CLUSTER: 'connect:8083'
      # CONTROL_CENTER_KSQL_URL: "http://ksql-server:8088"
      # CONTROL_CENTER_KSQL_ADVERTISED_URL: "http://localhost:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
    networks:
      - kafka
      - zookeeper

  connect:
    image: confluentinc/cp-kafka-connect:$CONFLUENT_VERSION
    hostname: connect
    container_name: connect
    depends_on:
      - zookeeper
      - broker
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'broker:9092'
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      CONNECT_PLUGIN_PATH: '/usr/share/java'
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-5.1.0.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      KAFKA_JMX_PORT: 5555
      # KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.rmi.port=5555"
    networks:
      - kafka
      - zookeeper
      - cassandra
      - elastic
      - mysql
      - monitoring

  kafka-init:
    image: confluentinc/cp-enterprise-kafka:$CONFLUENT_VERSION
    hostname: kafka-init
    container_name: kafka-init
    depends_on:
      - broker
    environment:
      # Dummy values to satisfy image requirements
      KAFKA_ZOOKEEPER_CONNECT: ignored
      KAFKA_ADVERTISED_LISTENERS: ignored
    command:
      "bash -c -a 'echo Waiting for Kafka to be ready... && \
                       /etc/confluent/docker/configure && \
                       cub kafka-ready -b broker:9092 1 60 --config /etc/kafka/kafka.properties && \
                       sleep 5 && 
                       kafka-topics --zookeeper zookeeper:2181 --topic events --create --if-not-exists --partitions 3 --replication-factor 1 && \
                       kafka-topics --zookeeper zookeeper:2181 --topic users --create --if-not-exists --partitions 3 --replication-factor 1 --config cleanup.policy=compact'"
    networks:
      - kafka
      - zookeeper

  cassandra:
    image: cassandra:3.11.4
    hostname: cassandra
    container_name: cassandra
    environment:
      # JVM_OPTS: "-Xms512M -Xmx512M"
      MAX_HEAP_SIZE: 128M
      HEAP_NEWSIZE: 24M
    cap_add:
      - IPC_LOCK
    ulimits:
      memlock: -1
    ports:
      - "9042:9042"
      - "9142:9042"
    networks:
      - cassandra
      - monitoring

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:$ELASTIC_VERSION
    hostname: elasticsearch
    container_name: elasticsearch
    environment:
      discovery.type: 'single-node'
      bootstrap.memory_lock: 'true'
      ES_JAVA_OPTS: '-Xms512m -Xmx512m'
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
    networks:
      - elastic
      - monitoring

  apm:
    image: docker.elastic.co/apm/apm-server:$ELASTIC_VERSION
    hostname: apm
    container_name: apm
    ports:
      - "8200:8200"
    volumes:
      - ./apm-server.yml:/usr/share/apm-server/apm-server.yml
    networks:
      - elastic

  kibana:
    image: docker.elastic.co/kibana/kibana:$ELASTIC_VERSION
    hostname: kibana
    container_name: kibana
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    networks:
      - elastic

  mysql:
    image: mysql
    hostname: mysql
    container_name: mysql
    environment:
      MYSQL_USER: dojo
      MYSQL_PASSWORD: dojo2018
      MYSQL_ROOT_PASSWORD: dojo2018
    networks:
      - mysql

  sonar:
    image: sonarqube:7.7-community
    hostname: sonar
    container_name: sonar
    ports:
      - "9000:9000"

networks:
  elastic:
  kafka:
  cassandra:
  zookeeper:
  monitoring:
  mysql:
